Protracker derivative Player development HOWTO
Copyright (C) 2002 Simon Peter <dn.tlp@gmx.net>
$Id$

Introduction
------------
If you want to create a player for a Protracker-derivative format, the
generic Protracker player 'CmodPlayer' that comes with AdPlug can be of
great help. It supports all standard Protracker features, plus a good set of
extensions to cope with most derivative formats.

When writing a player for a Protracker-derivative format, it is almost
always better to use and extend the CmodPlayer class, instead of writing a
whole new player.

Features
--------
In addition to handling your data just like the original Protracker would,
AdPlug's generic Protracker player has the following extra features:

- Special Arpeggio lists, just like in the SA2 format.
- Extendable set of up to 256 note commands.
- 16 behaviour changing flags.
- Arbitrary numbers of rows, patterns, tracks and orderlist entries.

The only current limitation is that it has a maximum 9 voice polyphony,
which isn't really a limitation, since the OPL2 is just 9 voices, anyway.

Defaults
--------
For historical reasons, CmodPlayer sets defaults to some values that needn't
be initialized by you. These are:

- The orderlist is preallocated to 128 entries.
- The patterndata is preinitialized to 64 patterns with 9 channels and 64
  rows each.
- The instruments array is preallocated to 250 instruments.

These are mostly standard Protracker limits. They stem from the original SA2
defaults, for which this was once the player. Look at the CmodPlayer
constructor for info on which variables are involved.

Protracker Loaders
------------------
When you decided to extend the CmodPlayer class, instead of writing a whole
new player, you do this by writing a loader for it. This is done very
similarily to writing a unique player for AdPlug. Thus, reading the AdPlug
Player development HOWTO ('Player-Development.txt') is recommended for this
task, too.

Instead of naming your player class 'CxxxPlayer', you should name it
'CxxxLoader' or something appropriate if the name is already taken. You then
publicly inherit the CmodPlayer class and fill the missing methods with
code. These are now:

static CPlayer *factory(Copl *newopl);          // return a new instance
bool load(istream &f, const char *filename);	// load file
float getrefresh();                     	// return needed timer refresh rate
std::string gettype();                  	// return file type

plus maybe some (or all) of the other informational methods, listed in the
Player development HOWTO. Refer also to that HOWTO to see what the above
methods are about.

Designing your loader
---------------------
File validation and initial loading is the same as it would be with any
other player. One speciality is that you have to call rewind(0) whenever you
completely loaded a valid file. Don't call it when you just exit your loader
because the file was invalid, etc...

The Protracker player needs at least an orderlist, the patterns and the
instruments to function. Most of the time, you have to convert these between
your file's ordering and CmodPlayer's internal ordering. Look in the file
'protrack.cpp', CmodPlayer's actual sources, for a list on how these
constructs are ordered internally.

Also, please look up the 'Defaults' section in this document, to see if you
need to reallocate any of the defaults.

There are some variables, that you automatically inherited with your new
loader, that you have to set in order to tell the Protracker player
something about your loaded module. These are the following (default preset
values are printed in brackets after the variable name):

length (unset):
The orderlist length. When CmodPlayer's orderlist pointer equals or is
bigger than this length, it is automatically wrapped around to 'restartpos'.

trackord (0):
Refer to 'Loading Patterns' below on this one.

restartpos (unset):
The restarting position in the orderlist, when length is exceeded.

activechan (0xffff):
A flag array, telling the player which channels in every pattern are
actually active and to be played. The ordering of this variable is a bit
awkward, so be careful! It is a 16-bit unsigned short, holding the
activeness of a channel in each of its bits, STARTING AT THE HIGHEST ORDER
BIT. It also holds values for 16 channels and you can only use the lower 9.
So, to set channel 0 active, you have to set bit 15 (counting from 0) to 1
and so on. You only use the upper 9 bits of this variable. Setting the lower
bits will have no effect.

initspeed (6):
Initial protracker-compatible speed setting.

bpm (unset):
Initial protracker-compatible bpm (sometimes called tempo) setting.

flags (Standard):
Refer to 'Special Flags' below.

nop (0):
The number of patterns in your module. You don't need to set this value. If
you leave it at 0, CmodPlayer will automatically determine the number of
_accessed_ patterns (which in no way need to be the same as the actual
number of patterns in your module) from the orderlist, in the rewind()
method. The value serves only informational purposes, anyway. It is not
needed for the actual playback. If you think you know better than
CmodPlayer, feel free to set it to something else and CmodPlayer won't touch
it anymore and display your value instead.

Loading Patterns
----------------
AdPlug's Protracker player stores the tracks (or channels, as some may call
them), that make up a pattern, in a way that makes it possible for you to
reorder and reuse them in an easy way. This also makes storing patterns in
the classic way a bit awkward.

If you just want to store your tracks the classic Protracker way (usually
the case), first use the CmodPlayer::init_trackord() method to do an initial
setup. Then store your tracks in a sequential manner, counting from 0, in
the 'tracks' array. That is, for the first 9 channels of your first pattern,
use tracks[0 - 9]. The second dimension of this array holds the rows of
each channel. For the next 9 channels, you use tracks[10-19], and so on.

If you want to make use of the reorder/reuse feature of the trackord array,
please refer to the sa2.cpp source file. This player utilizes this method.
Basically, the 'trackord' array tells the player which track out of the
'tracks' array he has to insert for each of the 9 tracks of a pattern. Thus,
the first dimension of this array stands for the corresponding pattern and
the next dimension holds the entries for all the 9 tracks.

CmodPlayer orders its note data, in the 'Tracks' struct, the following way:

'note' holds the note value. A value of 0 means no note. A value of 127
means "key off". Values from 1 to 96 are actual notes to be played.
Everything else is ignored. The octaves are encoded with the actual note
values. Thus, notes from 1 to 12 are the 12 halftone-steps of the first,
lowest octave, 13 to 24 are those of the next lowest octave, and so on.
Refer to the source code to see which frequencies are actually associated
with the note values.

'inst' holds the instrument to be played with this note. Again, a 0 value
means no instrument is associated with this note and the last active
instrument is taken instead. Otherwise, the instrument with the number
'inst' minus 1 is fetched from the 'inst' array (it's 0 based).

'command' holds the command to be issued with this note. All available
commands are in the following table:

Value | Command                               | Values               | Range
------+---------------------------------------+----------------------+------
  0xy | Arpeggio                              | xy=1st note,2nd note | [0-F]
  1xx | Frequency slide up                    | xx=sliding speed     | [0-FF]
  2xx | Frequency slide down                  | xx=sliding speed     | [0-FF]
  3xx | Tone portamento                       | xx=sliding speed     | [0-FF]
  4xy | Vibrato                               | xx=speed,depth       | [0-F]
  5xy | Tone portamento & volume slide        | xy=vol up|vol down   | [0-FF]
  6xy | Vibrato & volume slide                | xy=vol up|vol down   | [0-FF]
  7xx | Set tempo                             | xx=new tempo         | [0-FF]
  8-- | Release sustaining note
  9xy | Set carrier/modulator volume          | xy=car vol|mod vol   | [0-F]
 10xy | SA2 volume slide                      | xy=vol up|vol down   | [0-F]
 11xx | Position jump                         | xx=new position      | [0-FF]
 12xx | Set carr. & mod. volume               | xx=new volume        | [0-3F]
 13xx | Pattern break                         | xx=new row           | [0-FF]
 14?? | Extended command:
   0x | Set chip tremolo                      | x=new depth          | [0-1]
   1x | Set chip vibrato                      | x=new depth          | [0-1]
   3x | Retrig note                           | x=retrig speed       | [0-F]
   4x | Fine volume slide up                  | x=vol up             | [0-F]
   5x | Fine volume slide down                | x=vol down           | [0-F]
   6x | Fine frequency slide up               | x=freq up            | [0-F]
   7x | Fine frequency slide down             | x=freq down          | [0-F]
 15xx | SA2 set speed                         | xx=new speed         | [0-FF]
 16xy | AMD volume slide                      | xy=vol up|vol down   | [0-F]
 17xx | Set instrument volume                 | xx=new volume        | [0-3F]
 18xx | AMD set speed                         | xx=new speed         | [0-FF]
 19xx | RAD set speed                         | xx=new speed         | [0-FF]
 20xx | RAD volume slide                      | xx=vol up/down       | [0-FF]
 21xx | Set modulator volume                  | xx=new volume        | [0-3F]
 22xx | Set carrier volume                    | xx=new volume        | [0-3F]
 23xx | Fine frequency slide up               | xx=sliding speed     | [0-FF]
 24xx | Fine frequency slide down             | xx=sliding speed     | [0-FF]
 25xy | Set carrier/modulator waveform        | xy=carr wav|mod wav  | [0-3,F]
 26xy | Volume slide                          | xy=vol up|vol down   | [0-F]
255-- | No operation (NOP)
------+---------------------------------------+----------------------+------
Table 1. Effect commands

The 'param1' and 'param2' variables hold the command's parameters. These are
command-dependant. Refer to the table above and to the source code to see
what they do with each of the commands.

Loading Instruments
-------------------
For the instrument data, CmodPlayer structures it in the following way:

Index | Operator  | Description                                      | OPL2
------+-----------+--------------------------------------------------+-----
    0 | Channel   | Feedback strength / Connection type              | 0xc0
    1 | Modulator | Amp Mod / Vib / EG type / Key Scaling / Multiple | 0x20
    2 | Carrier   | Amp Mod / Vib / EG type / Key Scaling / Multiple | 0x23
    3 | Modulator | Attack Rate / Decay Rate                         | 0x60
    4 | Carrier   | Attack Rate / Decay Rate                         | 0x63
    5 | Modulator | Sustain Level / Release Rate                     | 0x80
    6 | Carrier   | Sustain Level / Release Rate                     | 0x83
    7 | Modulator | Wave Select                                      | 0xe0
    8 | Carrier   | Wave Select                                      | 0xe3
    9 | Modulator | Key scaling level / Operator output level        | 0x40
   10 | Carrier   | Key scaling level / Operator output level        | 0x43
------+-----------+--------------------------------------------------+-----
Table 2. Instrument data (inst[].data[]) values

There are 3 extensions, CmodPlayer imposes to the standard instrument data:

First, there's the Special Arpeggio. This is explained in the 'Special
Arpeggio' section, below.

Next we got the 'slide' variable. This is a pre-slide value that is always
added to the frequency of the note, whenever this instrument is to be
played.

Finally, there's the 'misc' variable. This is just the holder for the value
of the 0xbd register (i.e. the "drums'n'misc" register) of the OPL2.

Special Flags
-------------
The 'flags' variable holds special flags to change the behaviour of the
player. These are:

Standard:
Act like standard Protracker would. This is the default.

Decimal:
Command parameters are decimal values, not hexadecimal. For split parameter
commands (i.e. commands with two parameters, like 0xy), this has no effect,
since decimal values would be from 0 to 9, anyway. But commands that take
both parameters as one value (i.e. like 1xx) now take values from 0 to 99
and handle them properly (i.e. decimal wrap-around is now at 9 to 10 and not
at F to 10).

Faust:
Treat the files like Faust Music Creator does.
[TODO: riven, could you please explain what this is about?]

NoKeyOn:
This prevents the OPL2 key off/on toggle on every newly played note. Some
trackers require it that way...

These flags can be set and unset at any time. To set a flag, just binary OR
it with the 'flags' variable. Use the 'enum Flags' data type, defined in the
CmodPlayer class for this purpose.

Deconstruction
--------------
Be careful when specifying your own deconstructors! These will generally
override CmodPlayer's deconstructor, because it is defined virtual. Since
CmodPlayer's own deconstructor normally handles all deconstruction work
automatically, you have to do this manually now.

To ease this process, there's a method deallocate() that you inherited with
your loader. Call this in your own deconstructor and it will handle the
deconstruction of the CmodPlayer-internal objects automatically, as usual.

Special Arpeggio
----------------
To use the special arpeggio facility, you have to initalize it first. Use
the init_specialarp() method for this purpose. CmodPlayer's deconstructor
or dealloc() automatically handles the deinit for you.

The special arpeggio uses the 4 variables 'arpstart', 'arpspeed', 'arppos'
and 'arpspdcnt' of the Instrument struct.

[TODO: actually explain. Refer to sa2.[cpp,h] and the original SA2 docs in
the meantime. The following table summarizes the special commands.]

Value | Command
------+----------------------------------
  252 | Set carr. & mod. volume
  253 | Release sustaining note
  254 | Arpeggio loop
  255 | End of special arpeggio
------+----------------------------------
Table 3. Special arpeggio commands
